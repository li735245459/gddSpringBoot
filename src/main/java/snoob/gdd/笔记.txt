================================JDK配置、Maven配置
    http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
    http://maven.apache.org/download.cgi
    设置环境变量:
	    JAVA_HOME:  D:\Program Files\Java\jdk1.8.0_171
	    M2_HOME: D:\Program Files\apache-maven-3.5.3
    追加PATH环境变量:
        %JAVA_HOME%\bin
        %JAVA_HOME%\jre\bin
        %JAVA_HOME%\lib\dt.jar
        %M2_HOME%\bin
    测试:
	    java -version
	    javac
	    mvn -v
================================修改Maven配置
	编辑文件D:\WorkSpace\apache-maven-3.5.3\conf\settings.xml
	<localRepository>D:/WorkSpace/apache-maven-repository/</localRepository>
	--
	<mirror>
        <id>nexus-aliyun</id>
        <mirrorOf>*</mirrorOf>
        <name>Nexus aliyun</name>
        <url>http://maven.aliyun.com/nexus/content/groups/public</url>
    </mirror>
================================设置IntelliJ IDEA的Maven参数
    File-Settings-Maven配置本地maven地址和本地maven库
    File-OthenSettings-DefaultSettings配置maven地址和本地maven库


================================上传本地项目到github
项目根目录自带.git文件,配置idel中github选项的用户名和密码
github仓库中新建项目并设置项目下载路劲到idel打开项目的Git-Repository-Remotest中

================================CORS实现跨域访问
方式1：返回新的CorsFilter（全局跨域）
方式2：手工设置响应头（HttpServletResponse）（局部跨域 ）
方式3：重写WebMvcConfigurer（全局跨域）
    在任意配置类,返回一个新的WebMvcConfigurer Bean,并重写其提供的跨域请求处理的接口
方式4：使用注解（@CrossOrigin）（局部跨域）
    在控制器上（@Controller）、方法上（@RequestMapping）使用注解 @CrossOrigin:
        @CrossOrigin(origins = "http://127.0.0.1:4200")

================================JWT的工作流程
下面是一个JWT的工作流程图。模拟一下实际的流程是这样的（假设受保护的API在/protected中）
用户导航到登录页，输入用户名、密码，进行登录
服务器验证登录鉴权，如果用户合法，根据用户的信息和服务器的规则生成JWT Token
服务器将该token以json形式返回（不一定要json形式，这里说的是一种常见的做法）
用户得到token，存在localStorage、cookie或其它数据存储形式中
以后用户请求/protected中的API时，在请求的header中加入 Authorization: Bearer xxxx(token)。此处注意token之前有一个7字符长度的 Bearer
服务器端对此token进行检验，如果合法就解析其中内容，根据其拥有的权限和自己的业务逻辑给出对应的响应结果。
用户取得结果

【session】实际上是基于cookie来传输的,最重要的session信息是存储在服务器的,所以服务器每次可以通过cookie中的sessionId获取到当前会话的用户,
对于单台服务器这样做没问题,但是对于多台就涉及到共享session的问题了,而且认证用户的增多,session会占用大量的服务器内存
【jwt】是存储在客户端的,服务器不需要存储jwt,jwt里面有用户id,服务器拿到jwt验证后可以获得用户信息也就实现了session的功能,但是相比session,
jwt是无状态的,其不与任何机器绑定,只要签名秘钥足够的安全就能保证jwt的可靠性


=================================IOC和AOP
AOP将共有的逻辑从业务逻辑中抽离出来

=================================构建Jar包,运行命令Spring Boot程序:
d: && cd D:\WorkSpace\GitHub\gddSpringBoot && mvn clean install
cd target && java -jar gdd-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev




