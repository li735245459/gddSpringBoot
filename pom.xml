<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>snoob</groupId>
    <artifactId>gdd</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>gdd</name>
    <description>gdd project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <!--Spring Boot Web依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--Spring Boot Test依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--Spring Boot Aop依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!--通过使用注解处理器生成自己的元数据-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!--发送邮件-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <!--JWT依赖-->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.0</version>
        </dependency>
        <!--热部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
            <scope>runtime</scope>
        </dependency>
        <!--mysql-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--<dependency>&lt;!&ndash;Spring Boot jpa依赖&ndash;&gt;-->
        <!--做基本的增删改查使用
        在ORM框架(Hibernate、TopLink、JDO)和JPA规范的基础上封装的一套操作数据的应用框架
        不用写一句SQL的hibernate（传统企业大都喜欢使用hibernate）
        -->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-data-jpa</artifactId>-->
        <!--</dependency>-->
        <!--
            mybatis
            做复杂查询使用mybatis做实体映射可以灵活调试动态sql（互联网行业通常使用mybatis）
            1)无配置文件注解方式适合简单快速的模式,其实像现在流行的这种微服务模式
            2)xml配置方式适合大型项目,可以灵活的动态生成SQL,方便调整SQL
        -->
        <!--
            MyBatis Spring Boot Starter: http://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
        -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.2</version>
        </dependency>
        <!--
            Mapper Spring Boot Starter: http://mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter
        -->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
            <version>2.0.3</version>
        </dependency>
        <!--
            分页插件: http://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter
        -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.5</version>
        </dependency>
        <!--
            poi: https://mvnrepository.com/artifact/org.apache.poi
        -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.17</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>3.17</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-scratchpad</artifactId>
            <version>3.17</version>
        </dependency>
        <!--
            easypoi: https://mvnrepository.com/artifact/cn.afterturn
        -->
        <!--<dependency>-->
        <!--<groupId>cn.afterturn</groupId>-->
        <!--<artifactId>easypoi-spring-boot-starter</artifactId>-->
        <!--<version>3.2.0</version>-->
        <!--</dependency>-->
        <!--
            MyBatis: http://mvnrepository.com/artifact/org.mybatis/mybatis
        -->
        <!--<dependency>-->
        <!--<groupId>org.mybatis</groupId>-->
        <!--<artifactId>mybatis</artifactId>-->
        <!--<version>3.4.6</version>-->
        <!--</dependency>-->
        <!--
            Mybatis Mapper: http://mvnrepository.com/artifact/tk.mybatis/mapper
        -->
        <!--<dependency>-->
        <!--<groupId>tk.mybatis</groupId>-->
        <!--<artifactId>mapper</artifactId>-->
        <!--<version>4.0.0</version>-->
        <!--</dependency>-->
        <!--spring-security-->
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-security</artifactId>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>com.github.pagehelper</groupId>-->
        <!--<artifactId>pagehelper</artifactId>-->
        <!--<version>latest version</version>-->
        <!--</dependency>-->
        <!--
            将Java对象转换为JSON字符串,也可以将一个JSON字符串转换成一个等效的Java对象(可以处理任意Java对象包括已存在的对象)
            https://github.com/alibaba/fastjson/wiki/Samples-DataBind
            https://github.com/alibaba/fastjson/wiki
        -->
        <!--<dependency>-->
        <!--<groupId>com.alibaba</groupId>-->
        <!--<artifactId>fastjson</artifactId>-->
        <!--<version>1.2.47</version>-->
        <!--</dependency>-->
        <!--
            easypoi导出excel: http://mvnrepository.com/artifact/org.jeecg
        -->
        <!--easypoi-base 导入导出的工具包,可以完成Excel导出,导入,Word的导出,Excel的导出功能-->
        <!--<dependency>-->
        <!--<groupId>org.jeecg</groupId>-->
        <!--<artifactId>easypoi-base</artifactId>-->
        <!--<version>2.4.0</version>-->
        <!--</dependency>-->
        <!--&lt;!&ndash;easypoi-web  耦合了spring-mvc 基于AbstractView,极大的简化spring-mvc下的导出功能&ndash;&gt;-->
        <!--<dependency>-->
        <!--<groupId>org.jeecg</groupId>-->
        <!--<artifactId>easypoi-web</artifactId>-->
        <!--<version>2.4.0</version>-->
        <!--</dependency>-->
        <!--&lt;!&ndash;easypoi-annotation 基础注解包,作用与实体对象上,拆分后方便maven多工程的依赖管理&ndash;&gt;-->
        <!--<dependency>-->
        <!--<groupId>org.jeecg</groupId>-->
        <!--<artifactId>easypoi-annotation</artifactId>-->
        <!--<version>2.4.0</version>-->
        <!--</dependency>-->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin><!-- Maven下 MyBatis Generator插件 配置 -->
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.6</version>
                <configuration>
                    <configurationFile>src/main/resources/generator-config.xml</configurationFile>
                    <!--
                    Running MyBatis Generator With Maven 参数列表:
                    http://www.mybatis.org/generator/running/runningWithMaven.html
                    -->
                    <overwrite>false</overwrite><!--不覆盖之前生成的文件-->
                    <verbose>true</verbose>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.46</version>
                    </dependency>
                    <!--通用 Mapper4 是一个可以实现任意 MyBatis 通用方法的框架，提供了常规的增删改查操作以及Example 相关的单表操作-->
                    <dependency>
                        <groupId>tk.mybatis</groupId>
                        <artifactId>mapper</artifactId>
                        <version>4.0.3</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

</project>
